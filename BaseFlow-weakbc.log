-- FreeFem++ v  3.530000 (date mar. 25 avr. 2017 10:07:35)
 Load: lg_fem lg_mesh lg_mesh3 eigenvalue
    1 : // Conditions aux limites sur le cylindres prises en compte de facon fai{®GázdA×0RŠble
    2 : // Version chere sans reduction de espace des forces
    3 : load "MUMPS_seq"(load: loadLibary C:\Program Files (x86)\FreeFem++\\.\MU{®GázdA×0RŠMPS_seq = 0)
    4 :
    5 : // Nombre de Reynolds
    6 : real Re=45;
    7 : real Rep=40;
    8 : int nummesh=22;
    9 : int nummeshp=22;
   10 : real nu=1./Re;
   11 : real tolNewton=1.e-12;
   12 :
   13 : mesh th=readmesh("data/mesh/mesh-"+nummesh+".msh");
   14 :
   15 : fespace fuuppp(th,[P1b,P1b,P1,P1,P1]);
   16 :
   17 : fuuppp [u0,v0,p0,f0,g0];
   18 : real us0,vs0;
   19 : us0=-1.; vs0=0.0;
   20 :
   21 : if(nummesh!=nummeshp)
   22 : {
   23 :
   24 :         mesh thp=readmesh("data/mesh/mesh-"+nummeshp+".msh");
   25 :
   26 :         fespace fuupppr(thp,[P1b,P1b,P1,P1,P1]);
   27 :
   28 :         fuupppr [u0r,v0r,p0r,f0r,g0r];
   29 :
   30 :         {
   31 :         ifstream file("data/baseflow/Baseflow-"+nummeshp+"-Re-"+Rep+".tx{®GázdA×0RŠt");
   32 :         file >> u0r[];
   33 :         };
   34 :
   35 :         [u0,v0,p0,f0,g0]=[u0r,v0r,p0r,f0r,g0r];
   36 : }
   37 : else
   38 : {
   39 :         if(Re==1)
   40 :         {
   41 :                 [u0,v0,p0,f0,g0]=[1,0,0,0,0];
   42 :         }
   43 :         else
   44 :         {
   45 :         {
   46 :         ifstream file("data/baseflow/Baseflow-"+nummesh+"-Re-"+Rep+".txt{®GázdA×0RŠ");
   47 :         file >> u0[];
   48 :         };
   49 :         };
   50 : };
   51 :
   52 :
   53 : varf vmat([du,dv,dp,df,dg],[ut,vt,pt,ft,gt])=
   54 :  int2d(th)( ( du*dx(u0)+dv*dy(u0) + (u0-us0)*dx(du)+(v0-vs0)*dy(du) )*ut{®GázdA×0RŠ 
   55 :           + ( du*dx(v0)+dv*dy(v0) + (u0-us0)*dx(dv)+(v0-vs0)*dy(dv) )*vt{®GázdA×0RŠ 
   56 :           + nu*(dx(du)*dx(ut)+dy(du)*dy(ut)+dx(dv)*dx(vt)+dy(dv)*dy(vt)){®GázdA×0RŠ 
   57 :           - (dx(ut)+dy(vt))*dp
   58 :           - (dx(du)+dy(dv))*pt +(dp*pt+df*ft+dg*gt)*1.e-16)
   59 :         + int1d(th,2)(df*ut + dg*vt)
   60 :         + int1d(th,2)(du*ft + dv*gt)
   61 :         +on(1,du=1.,dv=1.)+on(4,dv=1.);
   62 :
   63 :
   64 : varf vres([du,dv,dp,df,dg],[ut,vt,pt,ft,gt])=
   65 :  int2d(th)( - ( (u0-us0)*dx(u0)+(v0-vs0)*dy(u0))*ut
   66 :             - ( (u0-us0)*dx(v0)+(v0-vs0)*dy(v0))*vt
   67 :             - nu*(  dx(u0)*dx(ut)+dy(u0)*dy(ut) + dx(v0)*dx(vt)+dy(v0)*d{®GázdA×0RŠy(vt) )
   68 :             + (dx(ut)+dy(vt))*p0
   69 :             + (dx(u0)+dy(v0))*pt)
   70 :  - int1d(th,2)( f0*ut + g0*vt )
   71 :  - int1d(th,2)( (u0-us0)*ft + (v0-vs0)*gt )
   72 :  +on(1,du=0.-u0,dv=0.-v0)+on(4,dv=0.-v0);
   73 :
   74 :
   75 :
   76 : matrix A;
   77 : fuuppp [du,dv,dp,df,dg];
   78 : fuuppp [ru,rv,rp,rf,rg];
   79 :
   80 : real residu,residuv,residub;
   81 : int i=0;
   82 : residu=1.;
   83 :
   84 :
   85 : while(sqrt(residu)>1.e-12)
   86 : {
   87 :
   88 :         i+=1;
   89 :
   90 :         cout << "Construction vecteur" << endl;
   91 :         ru[]=vres(0,fuuppp,tgv=1);
   92 :         residuv=int2d(th)(ru*ru+rv*rv+rp*rp);
   93 :         residub=int1d(th,2)(rf*rf+rg*rg);
   94 :         residu=residuv+residub;
   95 :
   96 :         cout  << i << " " << sqrt(residuv) << "    " << sqrt(residub) <<{®GázdA×0RŠ " " << sqrt(residu) << endl;
   97 :
   98 :         if( sqrt(residu) <= tolNewton ) break;
   99 :
  100 :         cout << "Construction matrice" << endl;
  101 :         A=vmat(fuuppp,fuuppp,tgv=-1);
  102 :
  103 :         cout << "Factorisation matrice" << endl;
  104 :         verbosity=10;
  105 :         set(A,solver=sparsesolver);
  106 :         verbosity=0;
  107 :
  108 :
  109 :         cout << "Inversion" << endl;
  110 :         du[]=A^-1*ru[];
  111 :
  112 :         u0[]+=du[];
  113 :         plot(u0,value=1,wait=1,cmm="iter="+i);
  114 :
  115 :         };
  116 :
  117 : {
  118 :                         ofstream file("data/baseflow/Baseflow-"+nummesh+{®GázdA×0RŠ"-Re-"+Re+".txt");
  119 :                         file << u0[];
  120 : };
  121 :
  122 :
  123 :  sizestack + 1024 =8288  ( 7264 )
 
  --  mesh:  Nb of Triangles =  31727, Nb of Vertices 15955
Construction vecteur
1 0.000279698    7.10276e-030 0.000279698
Construction matrice
Factorisation matrice
 Morse matrix GC Precond diag
 BuildSolverMUMPSseq<double>
  -- MUMPS LU   n=  143229, peak Mem: 301 Mb sym: 0
Inversion
Construction vecteur
2 2.38009e-006    7.63336e-022 2.38009e-006
Construction matrice
Factorisation matrice
 Morse matrix GC Precond diag
 BuildSolverMUMPSseq<double>
  -- MUMPS LU   n=  143229, peak Mem: 301 Mb sym: 0
Inversion
Construction vecteur
3 3.87819e-009    3.31605e-023 3.87819e-009
Construction matrice
Factorisation matrice
 Morse matrix GC Precond diag
 BuildSolverMUMPSseq<double>
  -- MUMPS LU   n=  143229, peak Mem: 301 Mb sym: 0
Inversion
Construction vecteur
4 4.74252e-015    8.65353e-027 4.74252e-015
 try getConsole D:\marquet\Desktop\ERC\CODES\WNL\BaseFlow-weakbc.edp
