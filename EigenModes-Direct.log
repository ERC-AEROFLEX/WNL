   22 : string namewnl4DeltaAA="u4-deltaAA-Re-"+Re+"-rho-"+rho+"-gammas-"+gammas{ÆG·zdAôu¿V+"-omegas-"+omegas+"-mesh-"+nummesh+"-num-"+mode+".txt";
   23 : string namewnl4AAAAc="u4-AAAAc-Re-"+Re+"-rho-"+rho+"-gammas-"+gammas+"-o{ÆG·zdAôu¿Vmegas-"+omegas+"-mesh-"+nummesh+"-num-"+mode+".txt";
   24 : string namewnl4AAAA="u4-AAAA-Re-"+Re+"-rho-"+rho+"-gammas-"+gammas+"-ome{ÆG·zdAôu¿Vgas-"+omegas+"-mesh-"+nummesh+"-num-"+mode+".txt";
   25 :
   26 : string namewnl5Coeffs="Coeffs-Ordre5-Re-"+Re+"-rho-"+rho+"-gammas-"+gamm{ÆG·zdAôu¿Vas+"-omegas-"+omegas+"-mesh-"+nummesh+"-num-"+mode+".dat";
   27 :
   28 :
    7 : include "MeshSpace.edp"//////////////////////
    2 : // Mesh and Spaces ///
    3 : //////////////////////
    4 :
    5 : mesh th=readmesh(pathmesh+namemesh);
    6 :
    7 : fespace fp(th,P1);
    8 : fespace fu(th,P1b);
    9 : fespace fuuppp(th,[P1b,P1b,P1,P1,P1]);
   10 :
   11 :
    8 :
    9 :
   10 : cout <<"-------------------------------------------------
  ... : ------------------" << endl;
   11 : cout << "-- Stability analysis of a cross-stream spring-mo
  ... : unted cylinder --" << endl;
   12 : cout << "-------------------------------------------------
  ... : ------------------" << endl;
   13 : cout << "--- mesh   = " << nummesh << endl;
   14 : cout << "--- Re        =  " << Re << endl;
   15 : cout << "--- rhos/rhof =  " << rho << endl;
   16 : cout << "--- gammas    =  " << gammas << endl;
   17 : cout << "-------------------------------------------------
  ... : ------" << endl;
   18 :
   19 :
   20 :
   21 : int ndoft,ndoff,ndofs;
   22 : ndoff=fuuppp.ndof;
   23 : ndofs=2;
   24 : ndoft=ndoff+ndofs;
   25 :
   26 :
   27 : // Base Flow
   28 : fuuppp [u0,v0,p0,f0,g0];
   29 : real us0,vs0;
   30 : us0=-1; vs0=0.;
   31 :
   32 : {
   33 :  ifstream file(pathsteadysol+"Baseflow-"+nummesh+"-Re-"+Re+".txt");
   34 :  file >> u0[];
   35 : };
   36 :
   37 :
   38 : plot(u0,value=1,wait=1);
   39 :
   40 : while(omegas<=omegasmax)
   41 : {
   42 :
   43 : shift=0.5*(0.75+omegas)*1i;
   44 :
   45 : cout << "--- omegas    =  " << omegas << endl;
   46 : cout << "--- shift  = " << shift << endl;
   47 :
   48 : //////////////////////////////////////////////////////
   49 :
   50 : cout << "Construction of matrix ( A - shift B )" << endl;
   51 :
   52 : matrix<complex> OP,B;
   53 :
   54 : {
   55 :
   56 : cout << "Construction Matrix Fluid - ( Aff - shift Bff ) " << endl;
   57 :
   58 :
   59 : varf vOP([u1,v1,p1,f1,g1],[ut,vt,pt,ft,gt]) =
   60 : int2d(th)(
   61 : - shift*(u1*ut+v1*vt)
   62 : -( (u0-us0)*dx(u1)+(v0-vs0)*dy(u1) + u1*dx(u0)+v1*dy(u0) )*ut
   63 : -( (u0-us0)*dx(v1)+(v0-vs0)*dy(v1) + u1*dx(v0)+v1*dy(v0) )*vt
   64 : - nu*(dx(u1)*dx(ut)+dy(u1)*dy(ut))
   65 : - nu*(dx(v1)*dx(vt)+dy(v1)*dy(vt))
   66 : + (dx(ut)+dy(vt))*p1
   67 : + (dx(u1)+dy(v1))*pt + 1.e-12*(p1*pt+f1*ft+g1*gt) )
   68 : -int1d(th,labelwall)(f1*ut+g1*vt)
   69 : -int1d(th,labelwall)(u1*ft+v1*gt)
   70 : +on(4,v1=1)+on(1,u1=1.,v1=1.);
   71 :
   72 : matrix<complex> Aff;
   73 :
   74 : Aff = vOP(fuuppp,fuuppp,tgv=1.e30);
   75 :
   76 : cout << "Construction Matrix Solid - ( Ass - shift Bss )" << endl;
   77 :
   78 : complex[int,int] Ass(ndofs,ndofs);
   79 : Ass=0.;
   80 : Ass(0,0)=-shift; Ass(0,1)=1.;
   81 : Ass(1,0)=-omegas*omegas; Ass(1,1)=-2*omegas*gammas-shift;
   82 :
   83 : cout << "Construction Matrix Coupling " << endl;
   84 :
   85 : complex[int] fsu0(ndoff),fsu1(ndoff);
   86 :
   87 : varf vvs([u1,v1,p1,f1,g1],[ut,vt,pt,ft,gt]) =
   88 : int2d(th)( dy(u0)*ut + dy(v0)*vt )+int1d(th,labelwall)(gt);
   89 :
   90 : fsu0=0.; fsu1=vvs(0,fuuppp);
   91 :
   92 : complex[int] rs0(ndoff),rs1(ndoff);
   93 :
   94 : varf vfy([du,dv,dp,df,dg],[ut,vt,pt,ft,gt])=int1d(th,labelwall)(gt);
   95 :
   96 : rs0=0.; rs1=vfy(0,fuuppp); rs1*=(4/pi/rho);
   97 :
   98 : cout << "Assemblage Matrix" << endl;
   99 :
  100 : OP = [
  101 : [ Aff, fsu0   ,  fsu1  ],
  102 : [rs0',Ass(0,0),Ass(0,1)],
  103 : [rs1',Ass(1,0),Ass(1,1)] ];
  104 :
  105 :
  106 : cout << "Construction of B " << endl;
  107 :
  108 : cout << "Construction Bff" << endl;
  109 :
  110 : varf vmassf([u1,v1,p1,f1,g1],[ut,vt,pt,ft,gt])
  111 : =int2d(th)(u1*ut+v1*vt) ;
  112 :
  113 : matrix<complex> Bff = vmassf(fuuppp,fuuppp);
  114 :
  115 : cout << "Construction Bss" << endl;
  116 :
  117 : complex[int,int] Bss(ndofs,ndofs);
  118 : Bss=0.+0.0*1i;
  119 : Bss(0,0)=1.+0.0*1i; Bss(1,1)=1.+0.0*1i;
  120 :
  121 : cout << "Assemblage B" << endl;
  122 :
  123 : fsu0=0.;fsu1=0.;
  124 : rs0=0.;rs1=0.;
  125 :
  126 :
  127 : B = [
  128 : [ Bff , fsu0   ,  fsu1  ],
  129 : [ rs0',Bss(0,0),Bss(0,1)],
  130 : [ rs1',Bss(1,0),Bss(1,1)]
  131 : ];
  132 :
  133 : cout << "B-coef= " << B.nbcoef << endl;
  134 :
  135 :
  136 : };
  137 :
  138 : cout << "OP-coef= " << OP.nbcoef << endl;
  139 :
  140 : cout << "Factorisation A " << endl;
  141 : set(OP,solver=sparsesolver);
  142 : set(B,solver=GMRES);
  143 :
  144 : complex[int] eig(nev);
  145 : complex[int,int] eigvect(ndoft,nev);
  146 :
  147 : fuuppp<complex> [ud,vd,pd,fd,gd];
  148 : fuuppp [ur,vr,pr,fr,gr];
  149 :
  150 : int kk=EigenValue(OP,B,sigma=shift,value=eig,rawvector=eigvect,tol=1e-12{ÆG·zdAôu¿V,maxit=100,ncv=50);
  151 :
  152 : {
  153 : ofstream file(patheigenmode+"DirEig-Re-"+Re+"-rho-"+rho+"-gammas-"+gamma{ÆG·zdAôu¿Vs+"-omegas-"+omegas+"-mesh-"+nummesh+".dat");
  154 :
  155 : for(int j=0; j<nev; j++)
  156 : {
  157 :  file << real(eig(j)) << " " << imag(eig(j)) << endl;
  158 :  cout << "---------------------------" << endl;
  159 :  cout << "--- j= " << j << " , eig= " << eig(j) << endl;
  160 :
  161 :
  162 :  for(int i=0; i<ndoff; i++) ud[][i]=eigvect(i,j);
  163 :  complex ysd=eigvect(ndoff,j);
  164 :  complex vsd=eigvect(ndoff+1,j);
  165 :
  166 :
  167 : [ur,vr,pr,fr,gr]=[real(ud),real(vd),real(pd),real(fd),real(gd)];
  168 :
  169 :
  170 : complex Normef,Normes,Norme;
  171 : Normef=int2d(th)(conj(ud)*ud+conj(vd)*vd);
  172 : Normes=conj(vsd)*vsd+conj(ysd)*ysd ;
  173 : Norme=Normef+Normes;
  174 : cout << "Normef= " << Normef << endl;
  175 : cout << "Normes= " << Normes << endl;
  176 : cout << "Norme= " << Norme << endl;
  177 :
  178 : complex[int] temp1(ndoft),temp2(ndoft);
  179 :
  180 : temp1=B*eigvect(:,j);
  181 : Norme=eigvect(:,j)'*temp1;
  182 : cout << "Norme= " << Norme << endl;
  183 :
  184 :
  185 : temp1=OP*eigvect(:,j);
  186 : temp2=B*eigvect(:,j); temp2*=(shift-eig(j)); temp1+=temp2;
  187 :
  188 : cout << "Residu= " << temp1.l2 << endl;
  189 :
  190 : plot(ur,value=1,wait=1,cmm="j="+j+"-vsd="+vsd);
  191 :
  192 : if(iwrite==0)
  193 : {
  194 :         {
  195 :         ofstream filev(patheigenmode+"Dir-Mode-Re-"+Re+"-rho-"+rho+"-gam{ÆG·zdAôu¿Vmas-"+gammas+"-omegas-"+omegas+"-mesh-"+nummesh+"-num-"+j+".dat");
  196 :         filev << eig(j) << endl;
  197 :         filev << eigvect(:,j) << endl;
  198 :         };
  199 : };
  200 :
  201 :
  202 :
  203 : };
  204 :
  205 :
  206 : };
  207 :
  208 :
  209 : omegas+=domegas;
  210 :
  211 : };
  212 :  sizestack + 1024 =5912  ( 4888 )
 
-----------------------------------------
--- Re        =  40
--- rhos/rhof =  50
--- omegas    =  0.657
-----------------------------------------
  --  mesh:  Nb of Triangles =  42071, Nb of Vertices 21125
-------------------------------------------------------------------
-- Stability analysis of a cross-stream spring-mounted cylinder --
-------------------------------------------------------------------
--- mesh   = 22
--- Re        =  40
--- rhos/rhof =  50
--- gammas    =  0
-------------------------------------------------------
--- omegas    =  0.657
--- shift  = (0,0.7035)
Construction of matrix ( A - shift B )
Construction Matrix Fluid - ( Aff - shift Bff )
Construction Matrix Solid - ( Ass - shift Bss )
Construction Matrix Coupling
Assemblage Matrix
  -- Block Matrix NxM = 3x3    nxm  =189769x189769 nb  none zero coef. 3408566
Construction of B
Construction Bff
Construction Bss
Assemblage B
  -- Block Matrix NxM = 3x3    nxm  =189769x189769 nb  none zero coef. 884030
B-coef= 884030
OP-coef= 3408566
Factorisation A
Complex eigenvalue problem: A*x - B*x*lambda
Complex eigenvalue problem: A*x - B*x*lambda
driver =4  sigma=(0,0.7035)
 
Dimension of the system            : 189769
Number of 'requested' eigenvalues  : 2
Number of 'converged' eigenvalues  : 2
Number of Arnoldi vectors generated: 50
Number of iterations taken         : 1
 
Eigenvalues:
  lambda[1]: (-0.0311643,0.719105)
  lambda[2]: (-8.0678e-007,0.662755)
 
---------------------------
--- j= 0 , eig= (-0.0311643,0.719105)
Normef= (0.999999,0)
Normes= (8.9815e-007,0)
Norme= (1,0)
Norme= (1,-5.0409e-019)
Residu= 2.11192e-015
---------------------------
--- j= 1 , eig= (-8.0678e-007,0.662755)
Normef= (0.999853,0)
Normes= (0.000146686,0)
Norme= (1,0)
Norme= (1,1.26102e-019)
Residu= 2.924e-015
times: compile 0.745s, execution 43.155s,  mpirank:0
 ######## We forget of deleting   1070 Nb pointer,   0Bytes  ,  mpirank 0, memor{ÆG·zdAôu¿Vy leak =0
 CodeAlloc : nb ptr  4464,  size :424096 mpirank: 0
Ok: Normal End
 try getConsole D:\marquet\Desktop\ERC\CODES\WNL\EigenModes-Direct.edp
